var http = require('http');
var https = require('https');
var url = require('url');

/* Simplified client requests
   This function is a thin wrapper around http.request that follows redirects and parses the response body.
   This function accepts the following options in addition to the options accepted by http.request.
   * url - If provided, url.parse will be used to generate the connection options. Any connection options 
   				 provided in the options (like host or path) will override the values generated by url.parse.
   * data - This data will be written out as the request body (for posts or puts).
   * encoding - The string encoding for the response data (ascii, utf8, or base64). utf8 is the default.
   * maxRedirects - How many redirects the client should follow before erroring out. Default is 10;
 */
module.exports.request = function( options, callback /* (err,data) */ ) {
	var opts = options;
	var data = options.data;
	var responseBody = [];
	var encoding = options.encoding || 'utf8';

	if ( options.url )
		opts = url.parse( options.url );
	for ( var key in options ) 
		if ( ! (key in { url:1, data:1, encoding:1}) )
			opts[key] = options[key];
	if ( ! opts.method ) opts.method = 'GET';

	var req = (opts.protocol=='https:'?https:http).request( opts, readResponse );
	req.on('error', callback);
	if ( data ) req.write( data );
	req.end();

	function readResponse( response ) {
		if ( response.statusCode >= 300 && response.statusCode < 400 && response.headers.location )
			return redirect( response.headers.location );

		response.on('data', appendData);
		response.on('end', done);
		response.setEncoding(encoding);
	}

	function redirect( location ) {
		if ( typeof opts.maxRedirects == 'number' && opts.maxRedirects <= 0 )
			return callback( new Error('maximum redirects exceeded') );

		var newOpts = url.parse( location );
		for ( var key in options ) 
			if ( ! (key in { url:1, host:1, hostname:1, port:1, socketPath:1, path:1 }) )
				newOpts[key] = opts[key];
		newOpts.maxRedirects = opts.maxRedirects ? opts.maxRedirects-1 : 9;
		module.exports.request( newOpts, callback );
	}

	function appendData( chunk ) {
		responseBody.push( chunk ) 
	}

	function done() {
		callback( null, responseBody.join('') );
	}
}

module.exports.for_testing = function( responder ) {
	responder = responder || function(o) { return JSON.stringify(o); }
	module.exports.request = function( options, callback ) {
		setTimeout( function() { return callback(null, responder(options)); }, 10 );
	}
}